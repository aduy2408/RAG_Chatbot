import langdetect
import os
from pathlib import Path


def detect_language(text):
    try:
        detected = langdetect.detect(text)
        vietnamese_chars = set('√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë')
        has_vietnamese = any(char in vietnamese_chars for char in text.lower())
        
        if has_vietnamese or detected == 'vi':
            return 'vi'
        else:
            return 'en'
    except:
        return 'en'


def get_language_flag(language):    
    return "üáªüá≥" if language == "vi" else "üá∫üá∏"


def create_welcome_message():
    """Create the welcome message for new users"""
    return {
        "role": "assistant",
        "content": """**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi APEC 2025 Korea Chatbot!**

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
- T√¨m hi·ªÉu l·ªãch tr√¨nh c√°c s·ª± ki·ªán APEC 2025
- Th√¥ng tin v·ªÅ ƒë·ªãa ƒëi·ªÉm t·ªï ch·ª©c
- Chi ti·∫øt v·ªÅ c√°c cu·ªôc h·ªçp v√† h·ªôi ngh·ªã
- Th√¥ng tin t·ªïng quan v·ªÅ APEC

**Welcome to APEC 2025 Korea Chatbot!**

I can help you with:
- APEC 2025 event schedules
- Venue information
- Meeting and conference details
- General APEC information

H√£y ƒë·∫∑t c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát ho·∫∑c ti·∫øng Anh! / Ask me anything in Vietnamese or English!""",
        "sources": [],
        "detected_language": "vi"
    }


def validate_environment():
    """Validate that the environment is properly set up"""
    # Check for .env file in backend directory
    backend_dir = os.path.dirname(os.path.dirname(__file__))
    env_file = Path(os.path.join(backend_dir, '.env'))
    if not env_file.exists():
        return False, ".env file not found! Create a .env file with your Google API key."

    # Load environment variables from the backend directory
    from dotenv import load_dotenv
    load_dotenv(env_file)

    # Check for API key
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        return False, "GOOGLE_API_KEY not found in environment variables!"

    # Check for vector store in backend directory
    vector_store_path = Path(os.path.join(backend_dir, 'chroma_db_langchain_e5'))
    if not vector_store_path.exists():
        return False, "Vector store not found! Please run the RAG setup first."

    return True, "Environment validation passed"


def get_context_suggestions(response_content, language):
    """Generate context-aware suggestions based on the assistant's response"""
    response_lower = response_content.lower()

    # Define suggestion patterns based on content keywords
    if language == "vi":
        suggestions_map = {
            # Event/Schedule related
            ("s·ª± ki·ªán", "l·ªãch", "th√°ng 5", "cu·ªôc h·ªçp"): [
                "Chi ti·∫øt v·ªÅ c√°c cu·ªôc h·ªçp quan tr·ªçng nh·∫•t?",
                "Ai s·∫Ω tham d·ª± c√°c s·ª± ki·ªán n√†y?",
                "L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω tham gia?"
            ],
            # Location related
            ("ƒë·ªãa ƒëi·ªÉm", "n∆°i", "t·ªï ch·ª©c", "venue"): [
                "H∆∞·ªõng d·∫´n ƒë·∫øn c√°c ƒë·ªãa ƒëi·ªÉm n√†y?",
                "C√≥ d·ªãch v·ª• ƒë∆∞a ƒë√≥n kh√¥ng?",
                "Th√¥ng tin v·ªÅ ch·ªó ·ªü g·∫ßn ƒë√≥?"
            ],
            # APEC general
            ("apec", "t·ªï ch·ª©c", "m·ª•c ti√™u"): [
                "L·ªãch s·ª≠ c·ªßa APEC l√† g√¨?",
                "C√°c th√†nh vi√™n APEC hi·ªán t·∫°i?",
                "Vai tr√≤ c·ªßa H√†n Qu·ªëc trong APEC 2025?"
            ],
            # Business/Economic
            ("kinh t·∫ø", "th∆∞∆°ng m·∫°i", "doanh nghi·ªáp"): [
                "C∆° h·ªôi kinh doanh t·ª´ APEC 2025?",
                "C√°c th·ªèa thu·∫≠n th∆∞∆°ng m·∫°i m·ªõi?",
                "T√°c ƒë·ªông ƒë·∫øn n·ªÅn kinh t·∫ø khu v·ª±c?"
            ]
        }
    else:  # English
        suggestions_map = {
            # Event/Schedule related
            ("event", "schedule", "may", "meeting", "conference"): [
                "What are the most important meetings?",
                "Who will attend these events?",
                "How to register for participation?"
            ],
            # Location related
            ("venue", "location", "place", "where"): [
                "How to get to these venues?",
                "Is transportation provided?",
                "Accommodation options nearby?"
            ],
            # APEC general
            ("apec", "organization", "goal", "objective"): [
                "What is the history of APEC?",
                "Current APEC member countries?",
                "Korea's role in APEC 2025?"
            ],
            # Business/Economic
            ("economic", "trade", "business", "commerce"): [
                "Business opportunities from APEC 2025?",
                "New trade agreements?",
                "Impact on regional economy?"
            ]
        }

    # Find matching suggestions based on content
    for keywords, suggestions in suggestions_map.items():
        if any(keyword in response_lower for keyword in keywords):
            return suggestions

    # Default suggestions if no specific match
    if language == "vi":
        return [
            "Cho t√¥i bi·∫øt th√™m chi ti·∫øt?",
            "C√≥ th√¥ng tin n√†o kh√°c kh√¥ng?",
            "T√¥i c√≥ th·ªÉ h·ªèi g√¨ ti·∫øp theo?"
        ]
    else:
        return [
            "Tell me more details?",
            "Any other information?",
            "What else can I ask?"
        ]
